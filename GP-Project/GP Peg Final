(ns gp-system.peg-game)

;; Project by Keith Denning and Rajwol Joshi

;Creating the Peg board game 
;From Clojure for the Brave and Famous, Chapter 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Creating the board

(defn tri*
  "Generates lazy sequence of triangular numbers"
  ([] (tri* 0 1))
  ([sum n]
     (let [new-sum (+ sum n)]
       (cons new-sum (lazy-seq (tri* new-sum (inc n)))))))

(def tri (tri*))

(defn triangular?
  "Is the number triangular? e.g. 1, 3, 6, 10, 15, etc"
  [n]
  (= n (last (take-while #(>= n %) tri))))

(defn row-tri
  "The triangular number at the end of row n"
  [n]
  (last (take n tri)))

(defn row-num
  "Returns row number the position belongs to: pos 1 in row 1,
  positions 2 and 3 in row 2, etc"
  [pos]
  (inc (count (take-while #(> pos %) tri))))

(defn connect
  "Form a mutual connection between two positions"
  [board max-pos pos neighbor destination]
  (if (<= destination max-pos)
    (reduce (fn [new-board [p1 p2]]
              (assoc-in new-board [p1 :connections p2] neighbor))
            board
            [[pos destination] [destination pos]])
    board))


(defn connect-right
  [board max-pos pos]
  (let [neighbor (inc pos)
        destination (inc neighbor)]
    (if-not (or (triangular? neighbor) (triangular? pos))
      (connect board max-pos pos neighbor destination)
      board)))

(defn connect-down-left
  [board max-pos pos]
  (let [row (row-num pos)
        neighbor (+ row pos)
        destination (+ 1 row neighbor)]
    (connect board max-pos pos neighbor destination)))

(defn connect-down-right
  [board max-pos pos]
  (let [row (row-num pos)
        neighbor (+ 1 row pos)
        destination (+ 2 row neighbor)]
    (connect board max-pos pos neighbor destination)))

(defn add-pos
  "Pegs the position and performs connections"
  [board max-pos pos]
  (let [pegged-board (assoc-in board [pos :pegged] true)]
    (reduce (fn [new-board connection-creation-fn]
              (connection-creation-fn new-board max-pos pos))
            pegged-board
            [connect-right connect-down-left connect-down-right])))

(defn new-board
  "Creates a new board with the given number of rows"
  [rows]
  (let [initial-board {:rows rows}
        max-pos (row-tri rows)]
    (reduce (fn [board pos] (add-pos board max-pos pos))
            initial-board
            (range 1 (inc max-pos)))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Moving the pegs

(defn pegged?
  "Does the position have a peg in it?"
  [board pos]
  (get-in board [pos :pegged]))

(defn remove-peg
  "Take the peg at given position out of the board"
  [board pos]
  (assoc-in board [pos :pegged] false))

(defn place-peg
  "Put a peg in the board at given position"
  [board pos]
  (assoc-in board [pos :pegged] true))

(defn move-peg
  "Take peg out of p1 and place it in p2"
  [board p1 p2]
  (place-peg (remove-peg board p1) p2))

(defn valid-moves
  "Return a map of all valid moves for pos, where the key is the
  destination and the value is the jumped position"
  [board pos]
  (into {}
        (filter (fn [[destination jumped]]
                  (and (not (pegged? board destination))
                       (pegged? board jumped)))
                (get-in board [pos :connections]))))

(valid-moves my-board 4)

(defn valid-move?
  "Return jumped position if the move from p1 to p2 is valid, nil
  otherwise"
  [board p1 p2]
  (get (valid-moves board p1) p2))

(defn can-move?
  "Do any of the pegged positions have valid moves?"
  [board]
  (some (comp not-empty (partial valid-moves board))
        (map first (filter #(get (second %) :pegged) board))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;defining colorize
(def alpha-start 97)
(def alpha-end 123)
(def letters (map (comp str char) (range alpha-start alpha-end)))
(def pos-chars 3)

(defn ansi
  "Produce a string which will apply an ansi style"
  [style]
  (str \u001b (style ansi-styles)))

(defn colorize
  "Apply ansi color to text"
  [text color]
  (str (ansi color) text (ansi :reset)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;rendering and printing the board

(defn render-pos
  [board pos]
  (str (nth letters (dec pos))
       (if (get-in board [pos :pegged])
         "0" ;modified to not include colorize
        "-"
        )
       ))

(defn row-positions
  "Return all positions in the given row"
  [row-num]
  (range (inc (or (row-tri (dec row-num)) 0))
         (inc (row-tri row-num))))

(defn row-padding
  "String of spaces to add to the beginning of a row to center it"
  [row-num rows]
  (let [pad-length (/ (* (- rows row-num) pos-chars) 2)]
    (apply str (take pad-length (repeat " ")))))

(defn render-row
  [board row-num]
  (str (row-padding row-num (:rows board))
       (clojure.string/join " " (map (partial render-pos board) 
                                     (row-positions row-num)))))

(defn print-board
  [board]
  (doseq [row-num (range 1 (inc (:rows board)))]
    (println (render-row board row-num)))
  board)


;;Code edited by Keith Denning and Rajwol Joshi;;

(defn make-move
  "Move peg from p1 to p2, removing jumped peg.
  If an illegal move occurs, the board is returned.
  If a legal move is made, the board is printed
  in order to show the move."
  [board p1 p2]
  (if-let [jumped (valid-move? board p1 p2)]
    (print-board (move-peg (remove-peg board jumped) p1 p2)) 
    board))



(defn print-board
  "This function prints the peg board and now also returns
  the current game board. This function can be used with make-move."
  [board]
  (doseq [row-num (range 1 (inc (:rows board)))]
    (println (render-row board row-num)))
  board)

(def my-board (assoc-in (new-board 5) [1 :pegged] false)) ; This sets the starting board
;;Code by Keith Denning and Rajwol Joshi

;; Initialization

(defn rand-frontier-tree
  "This function generates a random subtree with one function
  and its arguments."
  [terminal-set function-set]
  (list (rand-nth function-set) (rand-nth terminal-set) (rand-nth terminal-set)))

(defn rand-terminal
  "This function returns a random terminal from the terminal set."
  [terminal-set]
  (rand-nth terminal-set))
                                                                                                                                
; Tree Generation
(defn full-peg-tree
  "This function creates a random full-tree"
  [terminal-set function-set max-depth]
  (list (rand-nth function-set)
        (if (= 1 max-depth)
          my-board ; The last node must be the initial game board.
          (full-peg-tree terminal-set function-set (dec max-depth)))
        (rand-nth terminal-set)
        (rand-nth terminal-set)))
  
; Population Generation
(defn gen-population
  "This program generates a population of
   randomly generated programs. Uses a loop."
  [num-pop max-depth terminal-set function-set]
  (loop [pop '()
         num num-pop]
    (if (= num 0)
      pop
      (recur (conj pop (full-peg-tree terminal-set function-set max-depth))
             (dec num)))))

    
;; Fitness Evaluation
; Use 10 data points

(defn make-program-into-fn
  "Makes a list into a function. Removed the argument because
  the peg game programs do not take arguments."
  [program]
  (eval (list 'fn
              '[]
              program)))

(defn fitness-peg
  "This function finds the fitness of a single program for the peg game."
  [program]
  (count (filter :pegged ; Counts the number of pegs remaining
               (vals     ; If a position is "pegged" it is counted
                 ((make-program-into-fn program))))))

(defn fitness-eval
  "This function creates a map of functions with their
   respective error values."
  [population]
  (map (fn [program]
         {:function program :fitness (fitness-peg program)})
       population))


;; Parent Selection
; We decided to implement tournament selection

(defn single-tourney
  "This function runs a single round of a tournament.
  It returns the function which wins the tourney. If there
  is a tie, the winner is chosen randomly."
  [programs]
  (let [best-error (apply min (map :fitness programs))]
   (:function (rand-nth (filter #(= best-error (:fitness %)) programs)))))

(defn tournament-selection
  "This function generates a programs which can
  be used as a parent for the next generation. 2 to 4 programs
  are chosen to participate in each round."
  [pop-maps]
  (single-tourney (repeatedly (rand-nth (range 3 7)) (fn [](rand-nth pop-maps)))))


;; Variation

(def instructions
  '{make-move 3})

(defn program-size
  "This function finds the size of a program"
  [prog]
  (if (seq? prog)
    (count (flatten prog))
    1))
  
(defn select-random-subtree
  "Given a program, selects a random subtree and returns it."
  ([prog]
    (select-random-subtree prog (rand-int (program-size prog))))
  ([prog subtree-index]
    (cond
      (not (seq? prog)) prog
      (and (zero? subtree-index)
           (some #{(first prog)} (keys instructions))) prog
      (< subtree-index (program-size (first prog))) (recur (first prog)
                                                           subtree-index)
      :else (recur (rest prog)
                   (- subtree-index (program-size (first prog)))))))

(defn replace-random-subtree
  "Given a program and a replacement-subtree, replace a random node
   in the program with the replacement-subtree."
  ([prog replacement-subtree]
      (replace-random-subtree prog replacement-subtree (rand-int (program-size prog))))
  ([prog replacement-subtree subtree-index]
    (cond
      (not (seq? prog)) replacement-subtree
      (zero? subtree-index) replacement-subtree
      :else (map (fn [element start-index]
                   (if (<= start-index
                           subtree-index
                           (+ start-index -1 (program-size element)))
                     (replace-random-subtree element
                                             replacement-subtree
                                             (- subtree-index start-index))
                     element))
                 prog
                 (cons 0 (reductions + (map program-size prog)))))))

(defn peg-depth-index
  "This function finds the index at which a subtree can be replaced."
  [prog max-depth]
  (rand-nth (range (inc max-depth) (program-size prog)))) ; The leftmost branch can never be replaced
                                                          ; That branch will be as long as the max-depth

;; Major System Change: Multi-Crossover and Multi-Mutation ;;
(defn multi-crossover
  "This function performs a crossover on two programs and
  returns the new program. The crossover is performed a random number
  of times between 1 and 5. The correct index must be used in order to
  protect the leftmost branch containing the initial board."
  [prog1 prog2 max-depth count]
  (if (= count 0)
    prog1
    (multi-crossover (replace-random-subtree prog2 
                                             (select-random-subtree prog1 
                                                                    (peg-depth-index prog1 max-depth)) 
                                             (peg-depth-index prog2 max-depth))
                     prog2
                     max-depth (dec count))))

(defn multi-mutation
  "This function takes a random node in a subtree and replaces it
  with another random node. The mutation is performed a random number
  of times between 1 and 5."
  [program terminal-set max-depth count]
  (if (= count 0)
   program
 (multi-mutation (replace-random-subtree program (rand-terminal terminal-set) (peg-depth-index program max-depth))
           terminal-set max-depth (dec count))))


; Combines all variation techniques
(defn evolve
  "This function takes a collection of selected parents and evolves them.
  It calls tournament selection whenever a parent is needed. Added '=' to
  the last condition. Solved the issue of premature recursion end."
  [pop-maps terminal-set max-depth]
  (loop [new-pop '()
         evolve-num (count pop-maps)]
    (let [probability (rand-int 100)] ; Reproduction 10%, Mutation 40%, Crossover 50%
      (cond (and (> probability 90) (> evolve-num 0)) (recur (conj new-pop (tournament-selection pop-maps))
                                                             (dec evolve-num))
            (and (> probability 60) (> evolve-num 0)) (recur (conj new-pop (multi-mutation (tournament-selection pop-maps) terminal-set max-depth (rand-int 5)))
                                                             (dec evolve-num))
            (and (>= probability 0) (> evolve-num 0)) (recur (conj new-pop (multi-crossover (tournament-selection pop-maps) (tournament-selection pop-maps) max-depth (rand-int 5)))
                                                            (dec evolve-num))
            :else new-pop))))

(defn best-fitness
  "This functions finds thes the function with the best fitness
  and outputs its value"
  [pop-maps]
  (apply min (map :fitness pop-maps)))

;; Main Function

(defn genetic-programming
  "This function runs the genetic programming system.
  For every generation, it displays the generation number,
  the best program of that generation, and the total error
  of the best program. At the end, the moves of the best
  program are printed."
  []
  (let [function-set '(make-move)
        terminal-set (range 1 16)
        max-depth 750
        pop-size 20
        max-gen 100]
    (loop [current-pop (gen-population pop-size max-depth terminal-set function-set) ; Initialize population
           gen-num 0
           best-program nil
           best-prog-error nil]
      (println "Generation Number:" gen-num
               "\nThe best program was:" best-program
               "\nThe error of the best program was (number of pegs left):" best-prog-error
               "Pop-num:" (count current-pop))
      (if (or (= gen-num max-gen) (= best-prog-error 1)) ; Continue until solution found or if max generation reached
        (do (println "\nGenetic Evolution finished!")
          (println "The best program is:")
          ((make-program-into-fn best-program)))
        (let [current-fitness (fitness-eval current-pop) ; Fitness evaluation
              best-prog (single-tourney current-fitness) ; Finds best program of generation
              best-prog-fitness (best-fitness current-fitness)]
          (recur (evolve current-fitness ; Selection and evolution
                         terminal-set
                         max-depth)
                 (inc gen-num)
                 best-prog
                 best-prog-fitness))))))

(genetic-programming)

;; In our proposal we said that we wanted our major change to be hoist mutation. However, hoist
;; mutation would not be possible with the trees that we've created due to the fact that 
;; the leftmost leaf node must be intact.
